{
  "version": 3,
  "sources": ["../../@sanity/image-url/src/parseAssetId.ts", "../../@sanity/image-url/src/parseSource.ts", "../../@sanity/image-url/src/urlForImage.ts", "../../@sanity/image-url/src/builder.ts"],
  "sourcesContent": ["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n", "import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = {...source}\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n", "import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n  ['frame', 'frame']\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = (spec.baseUrl || 'https://cdn.sanity.io').replace(/\\/+$/, '')\n  const vanityStub = spec.vanityName ? `/${spec.vanityName}` : '' \n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}${vanityStub}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}` \n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n", "import type {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  SanityModernClientLike,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityModernClientLike(\n  client?: SanityClientLike | SanityProjectDetails | SanityModernClientLike\n): client is SanityModernClientLike {\n  return client && 'config' in client ? typeof client.config === 'function' : false\n}\n\nfunction isSanityClientLike(\n  client?: SanityClientLike | SanityProjectDetails | SanityModernClientLike\n): client is SanityClientLike {\n  return client && 'clientConfig' in client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(\n  options?: SanityClientLike | SanityProjectDetails | SanityModernClientLike\n) {\n  // Did we get a modernish client?\n  if (isSanityModernClientLike(options)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = options.config()\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Did we get a SanityClient?\n  if (isSanityClientLike(options)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = options.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options || {})\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format?: ImageFormat | undefined) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Vanity URL for more SEO friendly URLs\n  vanityName(value: string) {\n    return this.withOptions({vanityName: value})\n  }\n\n  frame(frame: number) {\n    if (frame !== 1) {\n      throw new Error(`Invalid frame value \"${frame}\"`)\n    }\n\n    return this.withOptions({frame})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"],
  "mappings": "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",
  "names": ["example", "parseAssetId", "ref", "_ref$split", "split", "id", "dimensionString", "format", "Error", "_dimensionString$spli", "imgWidthStr", "imgHeightStr", "width", "height", "isValidAssetId", "isFinite", "isRef", "src", "source", "_ref", "isAsset", "_id", "isAssetStub", "asset", "url", "parseSource", "image", "isUrl", "urlToId", "_extends", "img", "crop", "hotspot", "applyDefaults", "test", "parts", "slice", "replace", "result", "left", "top", "bottom", "right", "x", "y", "SPEC_NAME_TO_URL_NAME_MAPPINGS", "urlForImage", "options", "spec", "JSON", "stringify", "cropLeft", "Math", "round", "cropTop", "hotSpotVerticalRadius", "hotSpotHorizontalRadius", "hotSpotCenterX", "hotSpotCenterY", "rect", "focalPoint", "ignoreImageParams", "fit", "specToImageUrl", "cdnUrl", "baseUrl", "vanityStub", "vanityName", "filename", "projectId", "dataset", "params", "_spec$rect", "isEffectiveCrop", "push", "bg", "flip", "flipHorizontal", "flipVertical", "filter", "Boolean", "join", "forEach", "mapping", "specName", "param", "encodeURIComponent", "length", "cropRect", "imgWidth", "imgHeight", "desiredAspectRatio", "cropAspectRatio", "max", "hotspotXCenter", "hotspotYCenter", "validFits", "validCrops", "validAutoModes", "isSanityModernClientLike", "client", "config", "isSanityClientLike", "clientConfig", "rewriteSpecName", "key", "specs", "_iterator", "_createForOfIteratorHelperLoose", "_step", "done", "entry", "value", "urlBuilder", "_options$config", "apiUrl", "apiHost", "ImageUrlBuilder", "_options$clientConfig", "parent", "_proto", "prototype", "withOptions", "newOptions", "hasOwnProperty", "specKey", "dpr", "maxWidth", "minWidth", "maxHeight", "minHeight", "size", "blur", "sharpen", "invert", "orientation", "quality", "forceDownload", "download", "indexOf", "saturation", "auto", "pad", "frame", "toString"]
}
